import React, { useState } from "react";
import Image from "next/image";
import { Box, Typography, Grid } from "@mui/material";
import { FixedSizeList } from "react-window";
import InfiniteLoader from "react-window-infinite-loader";
import AutoSizer from "react-virtualized-auto-sizer";
function List({ data }: any) {
  const [products, setProducts] = useState<any[]>(data.products);
  const [hasNextPage, setHasNextPage] = useState(products.length < 100);
  const [isNextPageLoading, setIsNextPageLoading] = useState(false);
  const itemCount = hasNextPage ? products.length + 1 : products.length;
  const isItemLoaded = (index) => !hasNextPage || index < products.length;
  const itemsPerRow = 5;
  const Item = ({ index, style }) => {
    // console.log("index", index, "style", style);
    // let content;
    // if (!isItemLoaded(index)) {
    //   content = "Loading...";
    // } else {
    //   content = products[index].title;
    // }

    // return (
    //   <Grid item xs={2} style={style}>
    //     {content}
    //   </Grid>
    // );
    const startIndex = index * itemsPerRow;
    const endIndex = Math.min(startIndex + itemsPerRow, itemCount);

    const rowItems = [];
    for (let i = startIndex; i < endIndex; i++) {
      if (!isItemLoaded(i)) {
        rowItems.push(<div>Loading...</div>);
      } else {
        const item = products[i];
        rowItems.push(
          <Box display={"flex"} flexDirection={"column"}>
            {index}
            {item.title}
            <Box width={"100%"} position={"relative"} height={"200px"}>
              <Image
                src={item.thumbnail}
                alt={item.description}
                width={0}
                height={0}
                sizes="100vw"
                style={{
                  width: "100%",
                  height: "100%",
                  objectFit: "contain",
                }}
              />
            </Box>
          </Box>
        );
      }
    }
    console.log(rowItems);
    return <Box sx={{ display: "flex", flexDirection: "row" }}>{rowItems}</Box>;
  };

  async function getMoreProducts() {
    console.log("loadNextPage");
    setIsNextPageLoading(true);
    const res = await fetch(
      `https://dummyjson.com/products?limit=10&skip=${products.length}`
    );
    const { products: newProducts } = await res.json();

    console.log("newprod", newProducts);
    setIsNextPageLoading(false);
    setHasNextPage([...products, newProducts].length < 100);
    setProducts((currentProducts) => [...currentProducts, ...newProducts]);
  }

  console.log(products);
  return (
    <Box width={"80vw"} marginX={"auto"}>
      <Typography variant="h5">Product List</Typography>

      {/* <Box display={"flex"} flexDirection={"row"} flexWrap={"wrap"} gap={2}> */}
      {/* <Grid container spacing={2}> */}
      {/* <AutoSizer disableHeight>
        {({ height, width }: any) => {
          console.log("k", height, width);
          return ( */}
      <InfiniteLoader
        isItemLoaded={isItemLoaded}
        itemCount={itemCount}
        loadMoreItems={getMoreProducts}
        style={{
          backgroundColor: "red",
        }}
      >
        {({ onItemsRendered, ref }: any) => (
          <FixedSizeList
            className="List"
            itemCount={itemCount}
            itemSize={50}
            onItemsRendered={onItemsRendered}
            ref={ref}
          >
            {Item}
          </FixedSizeList>
        )}
      </InfiniteLoader>
      {/* );
        }}
      </AutoSizer> */}
      {/* </Grid> */}
      {/* </Box> */}
    </Box>
  );
}
export async function getStaticProps() {
  const res = await fetch("https://dummyjson.com/products?limit=10");

  const data = await res.json();

  return {
    props: {
      data,
    },
  };
}

export default List;
