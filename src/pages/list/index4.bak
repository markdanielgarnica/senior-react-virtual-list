import React, { useState, useEffect, useRef } from "react";
import { useSelector, useDispatch } from "react-redux";
import { Box, Typography } from "@mui/material";

import {
  setHasMoreProducts,
  setIsLoading,
  setProductsState,
} from "@/reducers/productReducer";
import ProductCard from "@/components/list/ProductCard";
import InfiniteList from "@/components/list/InfiniteList";
function List({ data }: any) {
  const dispatch = useDispatch();
  const hasMoreProductsState = useSelector(
    (state) => state.products.hasMoreProducts,
  );
  const cachedProducts = useSelector((state) => state.products.data);

  const [products, setProducts] = useState<any[]>(
    cachedProducts.length ? cachedProducts : data.products,
  );

  const itemCount = products.length;
  const productPerPage = 10;

  const isItemLoaded = (index: number) => index < products.length;

  async function fetchMoreData(startIndex: number) {
    const nextPage = Math.floor(startIndex / productPerPage) + 1;
    const skip = (nextPage - 1) * productPerPage;
    const limit = productPerPage;
    dispatch(setIsLoading(true));

    const res = await fetch(
      `https://dummyjson.com/products?limit=${limit}&skip=${skip}`,
    );

    const { products: newProducts } = await res.json();

    dispatch(setIsLoading(false));
    const hasMore = newProducts.length === productPerPage;
    dispatch(setHasMoreProducts(hasMore));
    setProducts((prevProducts) => [...prevProducts, ...newProducts]);
  }

  const renderItem = (index: number) => {
    const item = products[index];
    return (
      <ProductCard
        key={item.id}
        title={item.title}
        thumbnail={item.thumbnail}
        description={item.description}
      />
    );
  };
  useEffect(() => {
    dispatch(setProductsState(products));
  }, [products]);

  return (
    <Box marginTop={4}>
      <Box display={"flex"} flexDirection={"column"} justifyContent={"center"}>
        <Typography variant="h3" textAlign={"center"}>
          Products
        </Typography>
        <Box marginX={"auto"}>
          <InfiniteList
            itemCount={itemCount}
            loadMoreItems={hasMoreProductsState ? fetchMoreData : () => {}}
            isItemLoaded={isItemLoaded}
            renderItem={renderItem}
          />
        </Box>
      </Box>
    </Box>
  );
}
export async function getStaticProps() {
  const res = await fetch("https://dummyjson.com/products?limit=10");

  const data = await res.json();

  return {
    props: {
      data,
    },
  };
}

export default List;
